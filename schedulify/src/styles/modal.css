/* #################
### BASE STYLING ###
#################### */
:root {
    --primary-dark: #24272e;
    --primary-dark-light: #34373e;
    --accent: #3b82f6;
    --accent-light: #edfaff;
    --status-success: rgb(127, 255, 144);
    --status-warning: rgb(255, 150, 127);

    --transition-duration-timing-to: 150ms ease-out;
    --transition-duration-timing-from: 150ms ease-in;
    --transition-duration-timing-delay-from: 0s 150ms ease-in;
}

*,
*::before,
*::after {
    box-sizing: inherit;
    margin: 0;
    padding: 0;
    color: inherit;
    font: inherit;
    line-height: inherit;
}

html {
    line-height: 1.5;
    box-sizing: border-box;
}

body {
    min-height: 100dvh;
    background-color: var(--primary-dark);
    color: whitesmoke;
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
    margin-bottom: 2rem;
    font-weight: 700;
    font-size: 2.5rem;
    line-height: 1.15;
    text-align: center;
}

h2 {
    font-weight: 600;
    font-size: 1.5rem;
    text-align: left;

    &:not(.accordion-toggle &) {
        /*margin-top: 2rem;*/
        margin-bottom: 0.25em;
    }
}

h3 {
    margin-bottom: 0.25em;
    font-weight: 500;
    font-size: 1.25rem;
}

section + section {
    margin-top: 1.5em;
}

button {
    border: none;
    background: none;
    font: inherit;
    color: inherit;
}

fieldset {
    line-height: 1;
}

ul {
    margin-bottom: 1em;
    list-style-position: inside;
}

li {
    list-style-type: none;
    display: flex;
    gap: 0.5em;

    &::before {
        content: "+";
        flex-basis: 0.5em;
        color: var(--status-success);
    }
    &:last-of-type::before {
        content: "-";
        color: var(--status-warning);
    }
}

.container {
    padding: 2em;
    width: min(90%, 48em);
    margin-inline: auto;
}

/* ##########################
### TOGGLE SWITCH STYLING ###
############################# */
.preferences {
    padding: 1em;
    margin-block: 2em;
    border-radius: 8px;
    border-color: rgb(245 245 245 / 0.4);

    & .legend {
        padding: 0.5em 1em;
        background-color: var(--primary-dark-light);
        border-radius: 9999px;
        font-weight: 500;
    }
}

.switch-container {
    padding: 1em 0 1em 0;
    width: min(14em, 100%);
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    row-gap: 1em;
    cursor: pointer;
    border-radius: 8px;

    /*&:hover,*/
    /*&:has(input:focus),*/
    /*&:has(input:focus-visible) {*/
    /*    outline: 2px solid var(--accent-light);*/
    /*}*/
}

.label {
    margin-right: 1em;
}

.switch {
    --_switch-height: 24px;
    --_switch-width: 48px;

    position: relative;
    margin-right: 0.5em;
    height: var(--_switch-height);
    width: var(--_switch-width);

    /* Hide default HTML checkbox but preserve accessibility. */
    & input {
        opacity: 0;
        width: 0;
        height: 0;
    }
}

/* The slider */
.slider {
    --outline-width: 1px;

    position: absolute;
    inset: 0;

    background-color: var(--primary-dark-light);
    border-radius: 9999px;
    outline: 1px solid whitesmoke;
    cursor: pointer;

    &::before {
        --_ratio: 80%;
        --_offset: 2px;

        content: "";

        position: absolute;
        top: 50%;
        left: var(--_offset);
        right: unset;
        translate: 0 -50%;

        height: var(--_ratio);
        aspect-ratio: 1 / 1;

        background-color: rgba(245 245 245 / 0.85);
        border-radius: 50%;
    }
    .switch input:checked + & {
        background-color: var(--accent);
        filter: brightness(130%);
        transition: background-color var(--transition-duration-timing-to);
    }
    .switch input:checked + &::before {
        left: 0;
        translate: calc(calc(var(--_switch-width) - 100%) - var(--_offset)) -50%;
    }

    @media (prefers-reduced-motion: no-preference) {
        transition: background-color var(--transition-duration-timing-from);
        .switch input:checked + & {
            transition: background-color var(--transition-duration-timing-to);
        }
        .switch input:checked + &::before {
            transition: translate var(--transition-duration-timing-to);
        }
    }
}

.switch-status {
    opacity: 0.85;

    .switch:has(#switch-toggle[checked]) + & {
        opacity: 1;
        font-weight: 500;
    }
}

/* #######################
### ACCORDION STYLING ###
########################## */
.accordion {
    /* Apply border radius to the parent container... */
    border-radius: 8px;
    /* ...and set overflow hidden to crop its children so the border remains visible. */
    overflow: hidden;

    &:has(.accordion-toggle:focus-visible),
    &:has(.accordion-toggle:focus) {
        outline: 2px solid var(--accent-light);
    }
}

.accordion-toggle {
    padding: 0.5em 1em;
    margin-bottom: 0;

    display: flex;
    justify-content: space-between;
    align-items: center;

    background-color: var(--accent);
    cursor: pointer;

    /* Make its children not clickable so only the <summary> element can be clicked */
    & > * {
        pointer-events: none;
    }

    &:focus-visible,
    &:focus,
    &:hover,
    .accordion:has(.accordion-panel[expanded]) & {
        filter: brightness(140%);
    }
}

.btn-icon {
    position: relative;
    width: 32px;
    height: 32px;
    flex-shrink: 0;
    background-color: var(--accent-light);
    border-radius: 100vmax;

    &::before,
    &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;

        height: 4px;
        width: calc(100% - 0.75em);

        background-color: var(--accent);
    }
    &::after {
        rotate: 90deg;
    }
    .accordion:has(.accordion-panel[expanded]) &::before,
    .accordion:has(.accordion-panel[expanded]) &::after {
        rotate: 180deg;
    }

    /* The prefers-reduced-motion feature query detects whether the user has requested the operating system to minimize the amount of animation or motion it uses */
    @media (prefers-reduced-motion: no-preference) {
        &::before,
        &::after {
            /* Transition from '-' to '+. */
            transition: rotate var(--transition-duration-timing-from);
        }

        /* Transition from '+' to -'. */
        .accordion:has(.accordion-panel[expanded]) &::before,
        .accordion:has(.accordion-panel[expanded]) &::after {
            transition: rotate var(--transition-duration-timing-to);
        }
    }
}

.accordion-panel {
    display: grid;
    grid-template-rows: 0fr;
    /* Make the collapsed panel container not accessible to screen reader. */
    /* Contrary to 'display: none', the 'visibility' property can be delayed to transition other properties (here 'grid-template-row'). */
    visibility: hidden;
    /* Also add opacity transition for better visual effect. */
    opacity: 0;

    /* Use a custom attribute (dynamically added/removed with JavaScript) to enable CSS transitions between the accordion states. */
    &[expanded] {
        grid-template-rows: 1fr;
        visibility: visible;
        opacity: 1;
    }

    @media (prefers-reduced-motion: no-preference) {
        /* Transition from expanded to collapsed state. */
        /* The 'visibility: hidden' property cannot be animated but it can be delayed so it kicks in only after the 'grid-template-rows' and 'opacity' transitions are complete.  */
        transition: grid-template-rows var(--transition-duration-timing-from),
        visibility var(--transition-duration-timing-delay-from),
        opacity var(--transition-duration-timing-from);

        /* Transition from collapsed to expanded state (no delay required).*/
        /* This works since 'visbility: visible' is set instantaneously and the 'grid-template-rows' and 'opacity' control the state transition. */
        &[expanded] {
            transition: grid-template-rows var(--transition-duration-timing-to),
            visibility 0s 0s ease-out, opacity var(--transition-duration-timing-to);
        }
    }
}

.accordion-drawer {
    color: var(--primary-dark);
    background-color: var(--accent-light);
    overflow: hidden;
}

/* Additional div to add padding to the content without messing with the animation. */
.accordion-content {
    padding: 1em;

    p {
        text-align: left;
    }
}
